plugins {
    id "java"
}

//TODO look into configurations
compileJava {
    if (System.getProperty("java.version").contains("11.")) {
        options.compilerArgs += ["--add-exports", "java.base/sun.text.spi=ALL-UNNAMED"]
        options.compilerArgs += ["--add-exports", "java.base/sun.util.locale.provider=ALL-UNNAMED"]
        options.compilerArgs += ['--add-exports', 'java.xml/com.sun.org.apache.xml.internal.serializer=ALL-UNNAMED']
    }
}

sourceSets.main.java {
        if (System.getProperty("java.version").contains("1.8")) {
            exclude "**/jdk11/**"
        } else {
            exclude "**/jdk8/**"
        }
}



def extraArgsPerSample =  [
        "StaticInit":["--initialize-at-build-time=ProofOfWork"],
        "Examples":["-H:ReflectionConfigurationFiles=/Users/eginez/src/native-image-examples/examples/src/main/resources/reflect-config.json"],
]

['ProofOfWork','Examples'].each { f ->
    def runTask = tasks.create(name:"run-$f", type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = "xyz.eginez.ni.examples.$f"
    }
    runTask.dependsOn(classes)

    def runWithAgentTask = tasks.create(name: "run-agent-$f", type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = "xyz.eginez.ni.examples.$f"
        jvmArgs = ["-agentlib:native-image-agent=config-output-dir=config/"]
    }
    runWithAgentTask.dependsOn(classes)

    def nativeiTask = tasks.create(name:"native-$f", type: Exec) {
        def extraArgs = extraArgsPerSample[f]
        def execLine = ["native-image"]
        if (project.hasProperty("debug")) {
            execLine.add('--debug-attach')
        }
        execLine.addAll(['--verbose', '--enable-all-security-services', "-H:Path=${project.buildDir}", "-H:Name=$f"])
        if (extraArgs != null) execLine.addAll(extraArgs)
        execLine.addAll(['--no-fallback', '-cp', "${project.libsDir}/*"])
        execLine.addAll(["xyz.eginez.ni.examples." +f])
        setCommandLine(execLine)
    }
    nativeiTask.dependsOn(assemble)
    
    def runNativeTask = tasks.create(name: "runnative-$f", type: Exec) {
        commandLine "${project.buildDir}/${f.toLowerCase()}"
    }
    runNativeTask.dependsOn(nativeiTask)
}
