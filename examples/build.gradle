import java.nio.file.Paths
import java.util.stream.Collectors

plugins {
    id "java"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("junit:junit:4.13")
    testCompile("com.google.guava:guava:23.5-jre")
}

test {

    def configDir = Paths.get(projectDir.toString(), "src", "main", "resources", "META-INF", "native-image", project.name)
    if (!configDir.toFile().exists())  configDir.toFile().mkdirs()
    def agentArgs = [
            //'config-merge-dir': configDir.toString(),
            'config-output-dir': configDir.toString(),
            'caller-filter-file': Paths.get(projectDir.toString(), "src", "test", "resources", "rules.json").toString(),
    ]
    def args = agentArgs.entrySet().stream().map{e -> "$e.key=$e.value"}.collect(Collectors.joining(","))

    jvmArgs  "-agentlib:native-image-agent=$args"
}

/*
['ProofOfWork', 'HelloWorld'].each { f ->
    def runTask = tasks.create(name:"run-$f", type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = "xyz.eginez.ni.examples.$f"
    }
    runTask.dependsOn(classes)

    def runWithAgentTask = tasks.create(name: "run-agent-$f", type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = "xyz.eginez.ni.examples.$f"
        jvmArgs = ["-agentlib:native-image-agent=config-output-dir=config/,config-write-period-secs=1,config-write-initial-delay-secs=0"]
    }
    runWithAgentTask.dependsOn(classes)

    def nativeiTask = tasks.create(name:"native-$f", type: Exec) {
        def extraArgs = extraArgsPerSample[f]
        def execLine = ["native-image"]
        if (project.hasProperty("debug")) {
            execLine.add('--debug-attach')
        }
        execLine.addAll(['--verbose', '--allow-incomplete-classpath', '--enable-all-security-services', "-H:Path=${project.buildDir}", "-H:Name=$f"])
        if (extraArgs != null) execLine.addAll(extraArgs)
        def rcp = sourceSets.main.runtimeClasspath.join(':')
        execLine.addAll(['--no-fallback', '-cp', "${project.libsDir}/*:$rcp"])
        execLine.addAll(["xyz.eginez.ni.examples." +f])
        setCommandLine(execLine)
    }
    nativeiTask.dependsOn(assemble)
    
    def runNativeTask = tasks.create(name: "runnative-$f", type: Exec) {
        commandLine "${project.buildDir}/${f.toLowerCase()}"
    }
    runNativeTask.dependsOn(nativeiTask)
 */
