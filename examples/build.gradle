import java.nio.file.Paths
import java.util.stream.Collectors

plugins {
    id "java"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("junit:junit:4.13")
    testCompile("com.google.guava:guava:23.5-jre")
}

def testJvmArgs
test {

    def configDir = Paths.get(projectDir.toString(), "src", "main", "resources", "META-INF", "native-image", project.name)
    if (!configDir.toFile().exists())  configDir.toFile().mkdirs()
    def agentArgs = [
            //'config-merge-dir': configDir.toString(),
            'config-output-dir': configDir.toString(),
            'caller-filter-file': Paths.get(projectDir.toString(), "src", "test", "resources", "rules.json").toString(),
    ]
    def args = agentArgs.entrySet().stream().map{e -> "$e.key=$e.value"}.collect(Collectors.joining(","))

    testJvmArgs = "-agentlib:native-image-agent=$args"
    // jvmArgs testJvmArgs
}

def customRun = tasks.create(name: "customRun", type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    //jvmArgs testJvmArgs
    main = "xyz.eginez.ni.examples.${project.getProperties().get('main').toString()}"
}
customRun.dependsOn(classes)

def customTest = tasks.create(name: "customTest", type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    main = "org.junit.runner.JUnitCore"
    args = ["xyz.eginez.ni.examples.HelloWorldLocalizedTest"]
}
customTest.dependsOn(classes)

def nativeBuild = tasks.create(name:"nativeBuild", type: Exec) {
    def execLine = ["native-image"]
    if (project.hasProperty("debug")) {
        execLine.add('--debug-attach')
    }
    def classMain = null
    if (project.hasProperty("main")) {
        classMain =  project.getProperties().get("main")
    }

    def main = "xyz.eginez.ni.examples.$classMain"
    execLine.addAll(['--verbose',
                     '--no-server',
                     '--allow-incomplete-classpath',
                     '--enable-all-security-services',
                     '-H:+ReportExceptionStackTraces',
                     '-H:+TraceClassInitialization',
                     '-H:IncludeResourceBundles=messages',
                     '-H:IncludeLocales=all',
                     "-H:Path=${project.buildDir}",
                     "-H:Name=$classMain"])
    def allcp = sourceSets.main.runtimeClasspath
    def rcp = allcp.join(':')
    execLine.addAll(['--no-fallback', '-cp', rcp])
    execLine.add(main)
    setCommandLine(execLine)
}
nativeBuild.dependsOn(classes)

def runNative = tasks.create(name:"runNative", type: Exec) {
    def classMain = null
    if (project.hasProperty("main")) {
        classMain =  project.getProperties().get("main")
    }
    def execLine = [project.buildDir.toPath().resolve(classMain.toString()).toString()]
    setCommandLine(execLine)
}
runNative.dependsOn(nativeBuild)

def nativeTestBuild = tasks.create(name:"nativeTestBuild", type: Exec) {
    def execLine = ["native-image"]
    if (project.hasProperty("debug")) {
        execLine.add('--debug-attach')
    }

    execLine.addAll(['--verbose', '--allow-incomplete-classpath', '--enable-all-security-services', "-H:Path=${project.buildDir}", "-H:Name=TestExec"])
    def allcp = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    def rcp = allcp.join(':')
    execLine.addAll(['--no-fallback', '-cp', rcp])
    execLine.addAll(["org.junit.runner.JUnitCore"])
    setCommandLine(execLine)
}
nativeTestBuild.dependsOn(classes)
